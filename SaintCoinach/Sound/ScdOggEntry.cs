using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SaintCoinach.Sound {
    public class ScdOggEntry : ScdEntry {
        #region XorTable
        private static readonly byte[] XorTable = new byte[256] { 
            0x3A, 0x32, 0x32, 0x32, 0x03, 0x7E, 0x12, 0xF7,
            0xB2, 0xE2, 0xA2, 0x67, 0x32, 0x32, 0x22, 0x32,
            0x32, 0x52, 0x16, 0x1B, 0x3C, 0xA1, 0x54, 0x7B,
            0x1B, 0x97, 0xA6, 0x93, 0x1A, 0x4B, 0xAA, 0xA6,
            0x7A, 0x7B, 0x1B, 0x97, 0xA6, 0xF7, 0x02, 0xBB,
            0xAA, 0xA6, 0xBB, 0xF7, 0x2A, 0x51, 0xBE, 0x03,
            0xF4, 0x2A, 0x51, 0xBE, 0x03, 0xF4, 0x2A, 0x51,
            0xBE, 0x12, 0x06, 0x56, 0x27, 0x32, 0x32, 0x36,
            0x32, 0xB2, 0x1A, 0x3B, 0xBC, 0x91, 0xD4, 0x7B,
            0x58, 0xFC, 0x0B, 0x55, 0x2A, 0x15, 0xBC, 0x40,
            0x92, 0x0B, 0x5B, 0x7C, 0x0A, 0x95, 0x12, 0x35,
            0xB8, 0x63, 0xD2, 0x0B, 0x3B, 0xF0, 0xC7, 0x14,
            0x51, 0x5C, 0x94, 0x86, 0x94, 0x59, 0x5C, 0xFC,
            0x1B, 0x17, 0x3A, 0x3F, 0x6B, 0x37, 0x32, 0x32,
            0x30, 0x32, 0x72, 0x7A, 0x13, 0xB7, 0x26, 0x60,
            0x7A, 0x13, 0xB7, 0x26, 0x50, 0xBA, 0x13, 0xB4,
            0x2A, 0x50, 0xBA, 0x13, 0xB5, 0x2E, 0x40, 0xFA,
            0x13, 0x95, 0xAE, 0x40, 0x38, 0x18, 0x9A, 0x92,
            0xB0, 0x38, 0x00, 0xFA, 0x12, 0xB1, 0x7E, 0x00,
            0xDB, 0x96, 0xA1, 0x7C, 0x08, 0xDB, 0x9A, 0x91,
            0xBC, 0x08, 0xD8, 0x1A, 0x86, 0xE2, 0x70, 0x39,
            0x1F, 0x86, 0xE0, 0x78, 0x7E, 0x03, 0xE7, 0x64,
            0x51, 0x9C, 0x8F, 0x34, 0x6F, 0x4E, 0x41, 0xFC,
            0x0B, 0xD5, 0xAE, 0x41, 0xFC, 0x0B, 0xD5, 0xAE,
            0x41, 0xFC, 0x3B, 0x70, 0x71, 0x64, 0x33, 0x32,
            0x12, 0x32, 0x32, 0x36, 0x70, 0x34, 0x2B, 0x56,
            0x22, 0x70, 0x3A, 0x13, 0xB7, 0x26, 0x60, 0xBA,
            0x1B, 0x94, 0xAA, 0x40, 0x38, 0x00, 0xFA, 0xB2,
            0xE2, 0xA2, 0x67, 0x32, 0x32, 0x12, 0x32, 0xB2,
            0x32, 0x32, 0x32, 0x32, 0x75, 0xA3, 0x26, 0x7B,
            0x83, 0x26, 0xF9, 0x83, 0x2E, 0xFF, 0xE3, 0x16,
            0x7D, 0xC0, 0x1E, 0x63, 0x21, 0x07, 0xE3, 0x01,
        };
        #endregion

        #region Fields
        private byte[] _Decoded;
        #endregion

        #region Constructor
        internal ScdOggEntry(ScdFile file, ScdEntryHeader header, int dataOffset)
            : base(file, header) {
            Decode(dataOffset);
        }
        #endregion

        public override byte[] GetDecoded() {
            return _Decoded;
        }

        #region Decode
        private void Decode(int dataOffset) {
            const int CryptTypeOffset = 0x00;
            const int XorValueOffset = 0x02;
            const int SeekTableSizeOffset = 0x10;
            const int VorbisHeaderSizeOffset = 0x14;

            var cryptType = (ScdOggCryptType)File.ReadInt16(dataOffset + CryptTypeOffset);

            if (cryptType != ScdOggCryptType.None && cryptType != ScdOggCryptType.FullXorUsingTable && cryptType != ScdOggCryptType.VorbisHeaderXor)
                throw new NotSupportedException();

            var seekTableSize = File.ReadInt32(dataOffset + SeekTableSizeOffset);
            var vorbisHeaderSize = File.ReadInt32(dataOffset + VorbisHeaderSizeOffset);

            var vorbisHeaderOffset = dataOffset + 0x20 + seekTableSize;
            var soundDataOffset = vorbisHeaderOffset + vorbisHeaderSize;

            var vorbisHeader = new byte[vorbisHeaderSize];
            Array.Copy(File._InputBuffer, vorbisHeaderOffset, vorbisHeader, 0, vorbisHeaderSize);

            if (cryptType == ScdOggCryptType.VorbisHeaderXor) {
                var xorVal = File._InputBuffer[dataOffset + XorValueOffset];
                if (xorVal != 0) {
                    for (var i = 0; i < vorbisHeader.Length; ++i)
                        vorbisHeader[i] ^= xorVal;
                }
            }

            _Decoded = new byte[vorbisHeader.Length + Header.DataSize];
            Array.Copy(vorbisHeader, 0, _Decoded, 0, vorbisHeader.Length);
            Array.Copy(File._InputBuffer, soundDataOffset, _Decoded, vorbisHeader.Length, Header.DataSize);

            if (cryptType == ScdOggCryptType.FullXorUsingTable)
                XorUsingTable();
        }
        private void XorUsingTable() {
            var staticXor = (byte)(Header.DataSize & 0x7F);
            var tableOffset = (byte)(Header.DataSize & 0x3F);
            for (var i = 0; i < _Decoded.Length; ++i) {
                _Decoded[i] ^= XorTable[(tableOffset + i) & 0xFF];
                _Decoded[i] ^= staticXor;
            }
        }
        #endregion
    }
}
